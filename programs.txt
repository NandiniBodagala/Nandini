#1.anagram
def anagrams(string1, string2):
    string1 = string1.replace(" ", "").lower()
    string2 = string2.replace(" ", "").lower()
    return sorted(string1) == sorted(string2)
print(anagrams("Dog", "god"))
print(anagrams("Cat", "tac"))
print(anagrams("angle", "glean"))
print(anagrams("tar", "rat"))
print(anagrams("car", "rac"))




def is_anagram(word1, word2):
    word1 = word1.replace(" ", "").lower()
    word2 = word2.replace(" ", "").lower()
    return sorted(word1) == sorted(word2)
word1 = input("Enter the first word: ")
word2 = input("Enter the second word: ")

if is_anagram(word1, word2):
    print(f"'{word1}' and '{word2}' are anagrams.")
else:
    print(f"'{word1}' and '{word2}' are not anagrams.")


#2.pangram
import string
def is_pangram(sentence):
    sentence = ''.join(filter(str.isascii, sentence.lower()))
    alphabet = set(string.ascii_lowercase)
    return alphabet <= set(sentence)
def find_missing_letters(sentence):
    sentence = ''.join(filter(str.isascii, sentence.lower()))
    alphabet = set(string.ascii_lowercase)
    missing_letters = alphabet - set(sentence)
    return ''.join(sorted(missing_letters))
sentence = "The quick brown fox jumps over the lazy dog."
if is_pangram(sentence):
    print("The sentence is a pangram.")
else:
    print("The sentence is not a pangram.")
    print("Missing letters:", find_missing_letters(sentence))

sentence2 = "Hello World"
if is_pangram(sentence2):
    print("The sentence is a pangram.")
else:
    print("The sentence is not a pangram.")
    print("Missing letters:", find_missing_letters(sentence2))


# 3.remove duplicates
def remove_duplicate_words(sentence):
    words = sentence.split()
    unique_words = []
#     for word in words:
#         if word not in unique_words:
#             unique_words.append(word)
#     return ' '.join(unique_words)
# sentence1 = "Good day day bye bye"
# sentence2 = "greet the day user greet good day"
# print(remove_duplicate_words(sentence1))
# print(remove_duplicate_words(sentence2))
#
#
#
#4.count of a string
# def find_string_weight(s):
#     s = s.lower()
#     weight = 0
#     for char in s:
#         if char.isalpha():
#             weight += ord(char) - ord('a') + 1
#     return weight
# string = "Apple"
# print(f"The weight of the string '{string}' is:", find_string_weight(string))
#
#5.Write a Code the words startswith s
strings = ["apple", "sample", "search", "cat"]
start_with_s = [s for s in strings if s.lower().startswith("s")]
def has_unique_chars(string):
    return len(set(string)) == len(string)
unique_strings = [s for s in start_with_s if has_unique_chars(s)]
print("Strings starting with 'S':", start_with_s)
print("Strings with unique characters:", unique_strings)
#

#6.Reverse string with a preserving order
def reverse_preserving_order(s):
    reversed_chars = [c for c in reversed(s) if c != " "]
    result = ""
    for char in s:
        if char == " ":
            result += " "
        else:
            result += reversed_chars.pop(0)
    return result
print(reverse_preserving_order("abcd"))
print(reverse_preserving_order("I am Java Developer"))
#
#7.Fibonacci Series
def fibonacci_series(n):
    a, b = 0, 1
    series = []
    for _ in range(n):
        series.append(a)
        a, b = b, a + b
    return series
num_terms = 10
print(f"The first {num_terms} terms of the Fibonacci series are:", fibonacci_series(num_terms))
#


#8.Concate the each element
def max_concatenated_number(nums):
    concatenated = ''.join(map(str, nums))
    max_num = int(concatenated)
    return max_num
numbers = [9, 7, 4, 30]
result = max_concatenated_number(numbers)
print(f"The maximum concatenated number is: {result}")


#9.first non-repeated letter.
# We have to take input, list of strings
input_strings = ["array", "apple", "rat"]
# we have to define a function to find the first non-repeating character in a string
def first_non_repeating(word):
    # At first we have to create  a dictionary to count occurrences of each character
    char_count = {}
    #And then Count the occurrences of each character
    for char in word:
        char_count[char] = char_count.get(char, 0) + 1
    # We have to find the first character with a count of 1
    for char in word:
        if char_count[char] == 1:
            return char
    # If there is no non-repeating character is found, return None
    return None
#After that we have to  Initialize an empty list to store the results
result = []
#And then we use loop through each string in the input list
for string in input_strings:
    #To find the first non-repeating character from the current string we use append
    result.append(first_non_repeating(string))
#To Print the results
print(result)



#10.Check the number is power of 10
#To define function to check Whether a number is a power of 10
def power_of_10(num):
    #To handle edge case for numbers <= 0
    if num <= 0:
        return False
    # Continuously divide the number by 10
    while num % 10 == 0:  # Check if divisible by 10
        num //= 10
    # If the result is 1, it's a power of 10
    return num == 1
#To take custom input from the user
number = int(input("Enter a number: "))
# To check the input number is a power of 10
if power_of_10(number):
    print(f"{number} is a power of 10.")
else:
    print(f"{number} is NOT a power of 10.")


#11.
# Write a function to check if a number is a power of 2
def is_power_of_2(num):
    # If a  power of 2 is greater than 0 and satisfies the condition (num & (num - 1)) == 0
    return num > 0 and (num & (num - 1)) == 0
# Take the custom input from the user
number = int(input("Enter a number: "))
#To Check if the input number is a power of 2 We write
if is_power_of_2(number):
    print(f"{number} is a power of 2.")
else:
    print(f"{number} is NOT a power of 2.")


#12.
#Write a Function to check if a number is a power of 5
def power_of_5(num):
    #To Handle edge case for numbers <= 0
    if num <= 0:
        return False
    #We have to Continuously divide the number by 5
    while num % 5 == 0:  # Check if divisible by 5
        num //= 5  # Divide by 5
    # If the result is 1, it's a power of 5
    return num == 1
#To take custom input from the user
number = int(input("Enter a number: "))
#To check if the input number is a power of 5
if power_of_5(number):
    print(f"{number} is a power of 5.")
else:
    print(f"{number} is NOT a power of 5.")